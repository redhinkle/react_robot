{"version":3,"sources":["parts/images/Robots-Square.jpg","parts/Main.js","parts/Head.js","parts/Body.js","parts/Left.js","parts/Right.js","parts/LeftLeg.js","parts/RightLeg.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Main","src","require","width","height","to","Head","Body","Left","Right","LeftLeg","RightLeg","App","className","exact","path","render","Boolean","window","location","hostname","match","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"2IAAAA,EAAOC,QAAU,IAA0B,2C,uHCG5B,SAASC,IACtB,OACE,6BACE,kGACA,yBACEC,IAAKC,EAAQ,IACbC,MAAM,QACNC,OAAO,UAGT,gDACoB,kBAAC,IAAD,CAAMC,GAAG,SAAT,UCXX,SAASC,IACtB,OACE,6BACE,iDACA,2BACE,8CAEF,0DAC8B,kBAAC,IAAD,CAAMD,GAAG,SAAT,SAE9B,kBAAC,IAAD,CAAMA,GAAG,KAAT,SCVS,SAASE,IACtB,OACE,6BACE,iDACA,2BACE,yCACA,6BAFF,2CAKA,kEACA,qDACyB,kBAAC,IAAD,CAAMF,GAAG,SAAT,SAEzB,kCACA,yCACa,kBAAC,IAAD,CAAMA,GAAG,aAAT,YADb,MACqD,IACnD,kBAAC,IAAD,CAAMA,GAAG,aAAT,cAEF,8FACmE,IACjE,kBAAC,IAAD,CAAMA,GAAG,aAAT,QAFF,OAEsC,kBAAC,IAAD,CAAMA,GAAG,cAAT,SAAmC,IAFzE,mBAKA,kBAAC,IAAD,CAAMA,GAAG,KAAT,SCvBS,SAASG,IACtB,OACE,6BACE,2BACG,IACD,uCAFF,yCAKA,0DAC8B,kBAAC,IAAD,CAAMH,GAAG,SAAT,QAD9B,gDCRS,SAASI,IACtB,OACE,6BACE,6EACiD,wCAGjD,0DAC8B,kBAAC,IAAD,CAAMJ,GAAG,SAAT,QAD9B,gDCPS,SAASK,IACtB,OACE,6BACE,2BACG,IACD,uCAFF,iDAKA,iFACsD,IACpD,kBAAC,IAAD,CAAML,GAAG,SAAT,QAFF,MCRS,SAASM,IACtB,OACE,6BACE,mFACwD,IACtD,yCAGF,oEACwC,kBAAC,IAAD,CAAMN,GAAG,SAAT,QADxC,M,MCkBSO,MAlBf,WACE,OACE,yBAAKC,UAAU,OACb,kBAAC,IAAD,KACE,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOC,OAAK,EAACC,KAAK,IAAIC,OAAQ,kBAAM,kBAAChB,EAAD,SACpC,kBAAC,IAAD,CAAOc,OAAK,EAACC,KAAK,QAAQC,OAAQ,kBAAM,kBAACV,EAAD,SACxC,kBAAC,IAAD,CAAOQ,OAAK,EAACC,KAAK,QAAQC,OAAQ,kBAAM,kBAACT,EAAD,SACxC,kBAAC,IAAD,CAAOO,OAAK,EAACC,KAAK,YAAYC,OAAQ,kBAAM,kBAACR,EAAD,SAC5C,kBAAC,IAAD,CAAOM,OAAK,EAACC,KAAK,aAAaC,OAAQ,kBAAM,kBAACP,EAAD,SAC7C,kBAAC,IAAD,CAAOK,OAAK,EAACC,KAAK,YAAYC,OAAQ,kBAAM,kBAACN,EAAD,SAC5C,kBAAC,IAAD,CAAOI,OAAK,EAACC,KAAK,aAAaC,OAAQ,kBAAM,kBAACL,EAAD,aCVnCM,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASN,OACP,kBAAC,IAAMO,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.6266a103.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/Robots-Square.ed3e6932.jpg\";","import React from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nexport default function Main() {\r\n  return (\r\n    <div>\r\n      <p>This is Jared's React Robot page. Go ahead and navigate through me!</p>\r\n      <img\r\n        src={require(\"./images/Robots-Square.jpg\")}\r\n        width=\"200px\"\r\n        height=\"200px\"\r\n      />\r\n\r\n      <p>\r\n        Enter through the <Link to=\"/head\">Head</Link>\r\n      </p>\r\n    </div>\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nexport default function Head() {\r\n  return (\r\n    <div>\r\n      <h1>This is the Head!</h1>\r\n      <p>\r\n        <strong>&lt;-['.']-&gt;</strong>\r\n      </p>\r\n      <p>\r\n        From here you can enter the <Link to=\"/body\">Body</Link>\r\n      </p>\r\n      <Link to=\"/\">Main</Link>\r\n    </div>\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nexport default function Body() {\r\n  return (\r\n    <div>\r\n      <h1>This is the Body.</h1>\r\n      <p>\r\n        <strong>[ . ]</strong>\r\n        <br />\r\n        (please no NOT poke my belly button...)\r\n      </p>\r\n      <p>Now you have a couple of options...</p>\r\n      <p>\r\n        You can go back to the <Link to=\"/head\">Head</Link>\r\n      </p>\r\n      <h2>OR</h2>\r\n      <p>\r\n        Got to the <Link to=\"/left-arm\">Left Arm</Link> or{\" \"}\r\n        <Link to=\"right-arm\">Right Arm</Link>\r\n      </p>\r\n      <p>\r\n        Better yet why don't you mosey on down to the legs? You have the{\" \"}\r\n        <Link to=\"/left-leg\">Left</Link> or <Link to=\"/right-leg\">Right</Link>{\" \"}\r\n        to choose from.\r\n      </p>\r\n      <Link to=\"/\">Main</Link>\r\n    </div>\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nexport default function Left() {\r\n  return (\r\n    <div>\r\n      <p>\r\n        {\" \"}\r\n        <strong>c^=</strong> I am the left arm! Know any lefties?\r\n      </p>\r\n\r\n      <p>\r\n        You can only go back to the <Link to=\"/Body\">Body</Link> now. I am not\r\n        attached to anything else...\r\n      </p>\r\n    </div>\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nexport default function Right() {\r\n  return (\r\n    <div>\r\n      <p>\r\n        I am the right arm! The world was made for me! <strong>=^3</strong>\r\n      </p>\r\n\r\n      <p>\r\n        You can only go back to the <Link to=\"/Body\">Body</Link> now. I am not\r\n        attached to anything else...\r\n      </p>\r\n    </div>\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nexport default function LeftLeg() {\r\n  return (\r\n    <div>\r\n      <p>\r\n        {\" \"}\r\n        <strong>_||</strong> This is my left leg! I wish it had wheels...\r\n      </p>\r\n\r\n      <p>\r\n        This is the end of the line, want to go back to the{\" \"}\r\n        <Link to=\"/Body\">Body</Link>?\r\n      </p>\r\n    </div>\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nexport default function RightLeg() {\r\n  return (\r\n    <div>\r\n      <p>\r\n        This is the right leg, I've had some work done on it!{\" \"}\r\n        <strong>|:|_</strong>\r\n      </p>\r\n\r\n      <p>\r\n        Nothing else to see here, back to the <Link to=\"/Body\">Body</Link>!\r\n      </p>\r\n    </div>\r\n  );\r\n}\r\n","import React from \"react\";\nimport { BrowserRouter as Router, Switch, Route } from \"react-router-dom\";\nimport Main from \"./parts/Main\";\nimport Head from \"./parts/Head\";\nimport Body from \"./parts/Body\";\nimport Left from \"./parts/Left\";\nimport Right from \"./parts/Right\";\nimport LeftLeg from \"./parts/LeftLeg\";\nimport RightLeg from \"./parts/RightLeg\";\nimport \"./App.css\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Router>\n        <Switch>\n          <Route exact path=\"/\" render={() => <Main />} />\n          <Route exact path=\"/head\" render={() => <Head />} />\n          <Route exact path=\"/body\" render={() => <Body />} />\n          <Route exact path=\"/left-arm\" render={() => <Left />} />\n          <Route exact path=\"/right-arm\" render={() => <Right />} />\n          <Route exact path=\"/left-leg\" render={() => <LeftLeg />} />\n          <Route exact path=\"/right-leg\" render={() => <RightLeg />} />\n        </Switch>\n      </Router>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}